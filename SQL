/* The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table. */ 
    
/* Q1: Some of the facilities charge a fee to members, but some do not.
Please list the names of the facilities that do. */    

SELECT *
FROM Facilities
WHERE membercost>0

/* Q2: How many facilities do not charge a fee to members? */

SELECT COUNT( facid ) AS count_no_membercost
FROM Facilities
WHERE membercost=0

/* Q3: How can you produce a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost?
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

SELECT facid, name, membercost, monthlymaintenance
FROM Facilities
WHERE membercost>0 AND membercost<(monthlymaintenance*0.2)

/* Q4: How can you retrieve the details of facilities with ID 1 and 5?
Write the query without using the OR operator. */

SELECT *
FROM Facilities
WHERE facid IN (1,5)

/* Q5: How can you produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100? Return the name and monthly maintenance of the facilities
in question. */

SELECT name,monthlymaintenance,
	CASE WHEN monthlymaintenance>100 THEN 'Expensive'
	ELSE 'Cheap' END AS label
FROM Facilities

/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Do not use the LIMIT clause for your solution. */

SELECT firstname, surname
FROM Members
WHERE joindate IN 
	(SELECT MAX(joindate)
	FROM Members)


/* Q7: How can you produce a list of all members who have used a tennis court?
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT sub.name, CONCAT(m.firstname,m.surname) AS name
FROM Members m
JOIN (SELECT f.name,b.memid
     FROM Facilities f
     JOIN Bookings b
     ON b.facid=f.facid 
     WHERE f.name LIKE 'Tennis%')sub
ON m.memid=sub.memid



/* Q8: How can you produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30? Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT f.name AS facility_name, CONCAT(m.firstname,' ',m.surname) AS name,
     CASE WHEN b.memid=0 THEN f.guestcost*b.slots
     ELSE f.membercost*b.slots END AS cost
FROM Members m
INNER JOIN Bookings b
ON m.memid=b.memid AND LEFT(b.starttime,10)='2012-09-14'
INNER JOIN Facilities f
ON f.facid=b.facid AND
 (b.memid=0 AND f.guestcost*b.slots>30) OR
(b.memid!=0 AND f.membercost*b.slots>30)
ORDER BY cost DESC


/* Q9: This time, produce the same result as in Q8, but using a subquery. */

SELECT sub.name AS facility_name, CONCAT(m.firstname,' ',m.surname) AS name,
     CASE WHEN m.memid=0 THEN sub.guestcost*sub.slots
     ELSE sub.membercost*sub.slots END AS cost
FROM Members m
INNER JOIN (SELECT b.memid,b.starttime,f.name,f.guestcost,f.membercost,b.slots  
            FROM Bookings b
            INNER JOIN Facilities f
             ON f.facid=b.facid AND
            (b.memid=0 AND f.guestcost*b.slots>30) OR
            (b.memid!=0 AND f.membercost*b.slots>30))sub
ON m.memid=sub.memid AND LEFT(sub.starttime,10)='2012-09-14'                        
ORDER BY cost DESC

/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */


SELECT f.name AS facility_name, 
	SUM(CASE WHEN b.memid=0 THEN f.guestcost*b.slots
        ELSE f.membercost*b.slots END) AS tot_revenue 
FROM Bookings b
INNER JOIN Facilities f
ON b.facid=f.facid
GROUP BY f.name
HAVING tot_revenue<1000
ORDER BY tot_revenue 



